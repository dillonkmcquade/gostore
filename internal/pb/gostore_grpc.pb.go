// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: gostore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoStoreClient is the client API for GoStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoStoreClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Update(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	Delete(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*WriteReply, error)
}

type goStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGoStoreClient(cc grpc.ClientConnInterface) GoStoreClient {
	return &goStoreClient{cc}
}

func (c *goStoreClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/gostore.proto.GoStore/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goStoreClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/gostore.proto.GoStore/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goStoreClient) Update(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/gostore.proto.GoStore/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goStoreClient) Delete(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/gostore.proto.GoStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoStoreServer is the server API for GoStore service.
// All implementations must embed UnimplementedGoStoreServer
// for forward compatibility
type GoStoreServer interface {
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Update(context.Context, *WriteRequest) (*WriteReply, error)
	Delete(context.Context, *ReadRequest) (*WriteReply, error)
	mustEmbedUnimplementedGoStoreServer()
}

// UnimplementedGoStoreServer must be embedded to have forward compatible implementations.
type UnimplementedGoStoreServer struct {
}

func (UnimplementedGoStoreServer) Write(context.Context, *WriteRequest) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedGoStoreServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedGoStoreServer) Update(context.Context, *WriteRequest) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoStoreServer) Delete(context.Context, *ReadRequest) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGoStoreServer) mustEmbedUnimplementedGoStoreServer() {}

// UnsafeGoStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoStoreServer will
// result in compilation errors.
type UnsafeGoStoreServer interface {
	mustEmbedUnimplementedGoStoreServer()
}

func RegisterGoStoreServer(s grpc.ServiceRegistrar, srv GoStoreServer) {
	s.RegisterService(&GoStore_ServiceDesc, srv)
}

func _GoStore_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoStoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gostore.proto.GoStore/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoStoreServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoStore_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoStoreServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gostore.proto.GoStore/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoStoreServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoStore_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoStoreServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gostore.proto.GoStore/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoStoreServer).Update(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gostore.proto.GoStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoStoreServer).Delete(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoStore_ServiceDesc is the grpc.ServiceDesc for GoStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gostore.proto.GoStore",
	HandlerType: (*GoStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _GoStore_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GoStore_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GoStore_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GoStore_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gostore.proto",
}
